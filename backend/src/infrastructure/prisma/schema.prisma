// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  masterPasswordHash    String   @map("master_password_hash")
  masterPasswordSalt    String   @map("master_password_salt")
  encryptionKeyHash     String   @map("encryption_key_hash")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  lastLogin            DateTime? @map("last_login")
  isActive             Boolean  @default(true) @map("is_active")
  
  // Dados adicionais para rastreamento
  name                 String?
  phoneNumber          String?  @map("phone_number")
  profilePicture       String?  @map("profile_picture")
  pushToken            String?  @map("push_token") // Token para notificações push
  
  // Relacionamentos
  passwordEntries      PasswordEntry[]
  userSessions         UserSession[]
  auditLogs            AuditLog[]
  preferences          UserPreferences?
  familyMemberships    FamilyMember[]
  locations            Location[]
  sentNotifications    Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")
  
  @@map("users")
}

model PasswordEntry {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  name              String
  website           String?
  username          String?
  encryptedPassword String   @map("encrypted_password")
  notes             String?
  folder            String?
  isFavorite        Boolean  @default(false) @map("is_favorite")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  lastUsed          DateTime? @map("last_used")
  
  // TOTP/2FA para esta entrada
  totpSecret        String?  @map("totp_secret") // Secret criptografado
  totpEnabled       Boolean  @default(false) @map("totp_enabled")
  
  // Relacionamentos
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  customFields      CustomField[]
  
  @@map("password_entries")
}

model CustomField {
  id                String   @id @default(cuid())
  passwordEntryId   String   @map("password_entry_id")
  fieldName         String   @map("field_name")
  encryptedValue    String   @map("encrypted_value")
  fieldType         String   @default("text") @map("field_type")
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relacionamentos
  passwordEntry     PasswordEntry @relation(fields: [passwordEntryId], references: [id], onDelete: Cascade)
  
  @@map("custom_fields")
}

model UserSession {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  tokenHash   String   @map("token_hash")
  deviceName  String?  @map("device_name")
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  lastUsed    DateTime @default(now()) @map("last_used")
  
  // Relacionamentos
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  details      Json?
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relacionamentos
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("audit_logs")
}

model UserPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  theme     String   @default("light") // 'light' ou 'dark'
  language  String   @default("pt-BR") // 'pt-BR', 'en-US', etc.
  autoLock  Int      @default(15) @map("auto_lock") // minutos para auto-lock (0 = desabilitado)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relacionamentos
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

// ====================================
// Modelos para Rastreamento Familiar
// ====================================

model Family {
  id           String   @id @default(cuid())
  name         String
  description  String?
  createdById  String   @map("created_by_id")
  inviteCode   String   @unique @map("invite_code") // Código único para convites
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  isActive     Boolean  @default(true) @map("is_active")
  
  // Relacionamentos
  members      FamilyMember[]
  
  @@map("families")
}

model FamilyMember {
  id              String   @id @default(cuid())
  familyId        String   @map("family_id")
  userId          String   @map("user_id")
  role            String   @default("member") // 'admin', 'member'
  nickname        String?  // Apelido dentro da família
  joinedAt        DateTime @default(now()) @map("joined_at")
  leftAt          DateTime? @map("left_at")
  isActive        Boolean  @default(true) @map("is_active")
  
  // Configurações de privacidade
  shareLocation   Boolean  @default(true) @map("share_location")
  showOnMap       Boolean  @default(true) @map("show_on_map")
  
  // Relacionamentos
  family          Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([familyId, userId])
  @@map("family_members")
}

model Location {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  latitude       Float
  longitude      Float
  accuracy       Float?   // Precisão em metros
  altitude       Float?
  speed          Float?   // Velocidade em m/s
  heading        Float?   // Direção em graus
  address        String?  // Endereço formatado
  timestamp      DateTime @default(now())
  batteryLevel   Float?   @map("battery_level") // Nível de bateria (0-1)
  isMoving       Boolean  @default(false) @map("is_moving")
  
  // Relacionamentos
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp])
  @@map("locations")
}

model Notification {
  id           String   @id @default(cuid())
  senderId     String?  @map("sender_id") // Pode ser null para notificações do sistema
  receiverId   String   @map("receiver_id")
  type         String   // 'location_alert', 'family_invite', 'sos', 'battery_low', 'geofence', etc.
  title        String
  body         String
  data         Json?    // Dados adicionais da notificação
  isRead       Boolean  @default(false) @map("is_read")
  isSent       Boolean  @default(false) @map("is_sent")
  sentAt       DateTime? @map("sent_at")
  readAt       DateTime? @map("read_at")
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relacionamentos
  sender       User?    @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
  receiver     User     @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@index([receiverId, isRead])
  @@map("notifications")
}

model GeofenceZone {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  name         String
  description  String?
  latitude     Float
  longitude    Float
  radius       Float    // Raio em metros
  isActive     Boolean  @default(true) @map("is_active")
  notifyOnEnter Boolean @default(true) @map("notify_on_enter")
  notifyOnExit Boolean @default(true) @map("notify_on_exit")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  @@map("geofence_zones")
}
