import { z } from 'zod';
import { Alert } from 'react-native';

// Schema para valida√ß√£o das vari√°veis de ambiente
const envSchema = z.object({
  EXPO_PUBLIC_API_BASE_URL: z
    .string()
    .url('EXPO_PUBLIC_API_BASE_URL deve ser uma URL v√°lida'),
});

// Validar e exportar as vari√°veis de ambiente
let env: z.infer<typeof envSchema>;

try {
  env = envSchema.parse(process.env);
} catch (error) {
  console.error('‚ùå Erro na valida√ß√£o das vari√°veis de ambiente:');
  console.error(error);
  
  // Mostrar erro mais detalhado
  if (error instanceof z.ZodError) {
    console.error('üìã Detalhes dos erros:');
    error.errors.forEach((err) => {
      console.error(`  - ${err.path.join('.')}: ${err.message}`);
    });
    
    // Mostrar erro no toast/alert
    const errorMessages = error.errors.map(err => `${err.path.join('.')}: ${err.message}`).join('\n');
    Alert.alert(
      '‚ùå Erro de Configura√ß√£o',
      `Vari√°veis de ambiente inv√°lidas:\n\n${errorMessages}`,
      [{ text: 'OK' }]
    );
  }
  
  // Re-throw para parar a aplica√ß√£o
  throw error;
}

export { env };

// Exportar tipos para TypeScript
export type Env = z.infer<typeof envSchema>;
